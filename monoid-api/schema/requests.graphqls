type MonoidRecordResponse {
    data: String!
    SchemaGroup: String
    SchemaName: String!
}

input CreateUserPrimaryKeyInput {
    name: String!
    apiIdentifier: String!
    workspaceId: ID!
}

input UpdateUserPrimaryKeyInput {
    id: ID!
    name: String!
}

enum UserDataRequestType {
    DELETE
    QUERY
}

input UserDataRequestInput {
    primaryKeys: [UserPrimaryKeyInput!]
    workspaceId: ID!
    type: UserDataRequestType!
}

input UserPrimaryKeyInput {
    apiIdentifier: String!
    value: String!
}

type UserPrimaryKey {
    id: ID!
    workspaceId: ID!
    name: String!
    apiIdentifier: String!
    properties: [Property!]
}

type PrimaryKeyValue {
    id: ID!
    userPrimaryKey: UserPrimaryKey! @goField(forceResolver: true)
    request: Request! @goField(forceResolver: true)
    value: String!
}

input RequestStatusQuery {
    siloDefinitions: [ID!]
}

type RequestStatusListResult {
    requestStatusRows: [RequestStatus!]
    numStatuses: Int!
}

type Request {
    id: ID!
    primaryKeyValues: [PrimaryKeyValue!]! @goField(forceResolver: true)
    requestStatuses(query: RequestStatusQuery, offset: Int, limit: Int!): RequestStatusListResult!
    type: UserDataRequestType!
    status: FullRequestStatus! @goField(forceResolver: true)
    createdAt: Time!
}

enum FullRequestStatus {
    CREATED
    IN_PROGRESS
    EXECUTED
    PARTIAL_FAILED
    FAILED
}

enum RequestStatusType {
    CREATED
    IN_PROGRESS
    EXECUTED
    FAILED
}

type RequestStatus {
    id: ID!
    request: Request! @goField(forceResolver: true)
    dataSource: DataSource! @goField(forceResolver: true)
    status: RequestStatusType!
    queryResult: QueryResult @goField(forceResolver: true)
}

enum ResultType {
    RECORDS_JSON
    FILE
}

type QueryResult {
  id: ID!
  requestStatus: RequestStatus! @goField(forceResolver: true)
  records: String
  resultType: ResultType!
}

extend type Query {
    userPrimaryKey(id: ID!): UserPrimaryKey!
    requestStatus(id: ID!): RequestStatus!
    primaryKeyValue(id: ID!): PrimaryKeyValue!
    request(id: ID!): Request!
}

type DownloadLink {
    url: String!
}

extend type Mutation {
    createUserPrimaryKey(input: CreateUserPrimaryKeyInput!): UserPrimaryKey
    updateUserPrimaryKey(input: UpdateUserPrimaryKeyInput!): UserPrimaryKey
    deleteUserPrimaryKey(id: ID!): ID


    createUserDataRequest(input: UserDataRequestInput): Request
    executeUserDataRequest(requestId: ID!): Request
    linkPropertyToPrimaryKey(propertyId: ID!, userPrimaryKeyId: ID): Property

    generateRequestDownloadLink(requestId: ID!): DownloadLink!
    generateQueryResultDownloadLink(queryResultId: ID!): DownloadLink!
}

type RequestsResult {
    requests: [Request!]!
    numRequests: Int!
}

extend type Workspace {
    requests(offset: Int, limit: Int!): RequestsResult!
    userPrimaryKeys: [UserPrimaryKey!]!
}

extend type DataSource {
    requestStatuses: [RequestStatus!]! @goField(forceResolver: true)
}

extend type Property {
    userPrimaryKey: UserPrimaryKey @goField(forceResolver: true)
}