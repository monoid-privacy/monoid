# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type DataSource {
    id: ID!
    name: String!
    group: String

    siloDefinition: SiloDefinition! @goField(forceResolver: true)
    properties: [Property!] @goField(forceResolver: true)
    description: String
}

type Property {
    id: ID!
    name: String!
    categories: [Category!] @goField(forceResolver: true)
    dataSource: DataSource! @goField(forceResolver: true)
}

type SiloSpecification {
    id: ID!
    name: String!
    logoUrl: String
    logo: String
    dockerImage: String!
    schema: String
}

type Subject {
    id: ID!
    name: String!
}

type Category {
    id: ID!
    name: String!
}

type DataMapRow {
    siloDefinition: SiloDefinition!
    property: Property!
    dataSource: DataSource!
}

input CreateSiloSpecificationInput {
    name: String!
    workspaceID: ID!
    logoURL: String
    dockerImage: String!
    schema: String
}

input CreateDataSourceInput {
    siloDefinitionID: ID!
    description: String
    propertyIDs: [ID!]
}

input UpdateSiloSpecificationInput {
    id: ID!
    dockerImage: String
    schema: String
    name: String
    logoUrl: String
}

input UpdateDataSourceInput {
    id: ID!
    description: String
}

input CreatePropertyInput {
    categoryIDs: [ID!]
    dataSourceID: ID!
    purposeIDs: [ID!]
}

input UpdatePropertyInput {
    id: ID!
    categoryIDs: [ID!]
    purposeIDs: [ID!]
}

input CreateCategoryInput {
    name: String!
    workspaceID: ID!
}

input CreateSubjectInput {
    name: String!
    workspaceID: ID!
}

input UpdateCategoryInput {
    name: String
}

input UpdateSubjectInput {
    name: String
}

input CategoryQuery {
    anyCategory: Boolean
    noCategory: Boolean
    categoryIDs: [ID!]
}

input DataMapQuery {
    categories: CategoryQuery
    siloDefinitions: [ID!]
}

type DataMapResult {
    dataMapRows: [DataMapRow!]
    numRows: Int!
}

extend type Query {
    dataSource(id: ID!): DataSource!
    siloSpecification(id: ID!): SiloSpecification!
    category(id: ID!): Category!
    subject(id: ID!): Subject!
    property(id: ID!): Property!
}

extend type Workspace {
    dataMap(query: DataMapQuery, limit: Int!, offset: Int): DataMapResult!
}

extend type Mutation {
    createDataSource(input: CreateDataSourceInput): DataSource
    createSiloSpecification(input: CreateSiloSpecificationInput): SiloSpecification
    createProperty(input: CreatePropertyInput): Property
    createSubject(input: CreateSubjectInput): Subject

    updateDataSource(input: UpdateDataSourceInput): DataSource
    updateSiloSpecification(input: UpdateSiloSpecificationInput): SiloSpecification

    updateProperty(input: UpdatePropertyInput): Property
    updateSubject(input: UpdateSubjectInput): Subject

    deleteDataSource(id: ID!): ID
    deleteSiloSpecification(id: ID!): ID
    deleteProperty(id: ID!): ID
    deleteSubject(id: ID!): ID

    detectSiloSources(workspaceId: ID!, id: ID!): Job!
}