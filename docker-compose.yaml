version: "3.7"
services:
  db:
    image: postgres:14.6-alpine3.16
    container_name: monoid-db
    restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_USER=${DATABASE_USER}
    volumes:
      - db:/var/lib/postgresql/data
      - ./monoid-config/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - monoid-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 10
  web:
    container_name: monoid-web
    image: monoidco/monoid-web:${VERSION}
    networks:
      - monoid-network
  temporal:
    container_name: monoid-temporal
    depends_on:
      - db
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PWD=${DATABASE_PASSWORD}
      - POSTGRES_SEEDS=monoid-db
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    image: temporalio/auto-setup:1.18.4
    networks:
      - monoid-network
    volumes:
      - ./monoid-config/temporal:/etc/temporal/config/dynamicconfig
    healthcheck:
      test:
        [
          "CMD",
          "tctl",
          "--address",
          "monoid-temporal:7233",
          "workflow",
          "list"
        ]
      interval: 1s
      timeout: 5s
      retries: 30
  api:
    container_name: monoid-api
    environment:
      - WEB_URL=${WEB_URL}
      - DB_USER=${DATABASE_USER}
      - DB_PASS=${DATABASE_PASSWORD}
      - DB_TCP_HOST=monoid-db
      - DB_PORT=5432
      - DB_NAME=${DATABASE_NAME}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - TEMP_STORE_PATH=/tmp/monoid
      - SEGMENT_KEY=${SEGMENT_KEY}
      - RESOURCE_PATH=${RESOURCE_PATH}
      - FILESTORE_PATH=${FILESTORE_PATH}
      - TEMPORAL=monoid-temporal:7233
    depends_on:
      db:
        condition: service_healthy
      loader:
        condition: service_completed_successfully
      temporal:
        condition: service_healthy
    networks:
      - monoid-network
    image: monoidco/monoid-api:${VERSION}
    volumes:
      - filestore:${FILESTORE_PATH}
      - tempstore:/tmp/monoid
      - ./monoid-config/resources:${RESOURCE_PATH}
  loader:
    container_name: monoid-loader
    command: /monoid-config
    environment:
      - DB_USER=${DATABASE_USER}
      - DB_PASS=${DATABASE_PASSWORD}
      - DB_TCP_HOST=monoid-db
      - DB_PORT=5432
      - DB_NAME=${DATABASE_NAME}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - SEGMENT_KEY=${SEGMENT_KEY}
    volumes:
      - ./monoid-config:/monoid-config
    depends_on:
      db:
        condition: service_healthy
    networks:
      - monoid-network
    image: monoidco/monoid-loader:${VERSION}
  worker:
    container_name: monoid-worker
    environment:
      - WEB_URL=${WEB_URL}
      - DB_USER=${DATABASE_USER}
      - DB_PASS=${DATABASE_PASSWORD}
      - DB_TCP_HOST=monoid-db
      - TEMP_STORE_PATH=/tmp/monoid
      - DB_PORT=5432
      - DB_NAME=${DATABASE_NAME}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - SEGMENT_KEY=${SEGMENT_KEY}
      - FILESTORE_PATH=${FILESTORE_PATH}
      - TEMPORAL=monoid-temporal:7233
    depends_on:
      db:
        condition: service_healthy
      loader:
        condition: service_completed_successfully
      temporal:
        condition: service_healthy
    networks:
      - monoid-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - filestore:${FILESTORE_PATH}
      - tempstore:/tmp/monoid
    image: monoidco/monoid-worker:${VERSION}
  proxy:
    depends_on:
      - web
      - api
    container_name: monoid-proxy
    networks:
      - monoid-network
    ports:
      - 8080:80
    image: monoidco/monoid-proxy:${VERSION}
networks:
  monoid-network:
    driver: bridge
    name: monoid-network
volumes:
  db:
    name: monoid-db
  filestore:
    name: monoid-filestore
  tempstore:
    name: monoid-tempstore
