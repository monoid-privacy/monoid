/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6/userguide/building_java_projects.html
 */

import com.expediagroup.graphql.plugin.gradle.graphql
import com.expediagroup.graphql.plugin.gradle.config.GraphQLSerializer

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.7.10"

    id("com.expediagroup.graphql") version "6.3.5"
    kotlin("plugin.serialization") version "1.7.10"

    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven { 
        setUrl("https://jitpack.io")
    }
    ivy {
        setUrl("https://download.eclipse.org/tools/cdt/releases/10.3/cdt-10.3.2/plugins")
        metadataSources {
            artifact()
        }
        patternLayout {
            artifact("/[organisation].[module]_[revision].[ext]")
        }
    }
}

dependencies {
    // Use the Kotlin JUnit 5 integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")

    // Use the JUnit 5 integration.
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.9.1")

    // This dependency is used by the application.
    implementation("com.google.guava:guava:31.1-jre")
    implementation("com.github.monoid-privacy.cpg:cpg-core:enable-go-SNAPSHOT")
    implementation("com.github.monoid-privacy.cpg:cpg-language-go:enable-go-SNAPSHOT")
    implementation("info.picocli:picocli:4.7.0")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.14.+")
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.14.+")

    implementation("com.expediagroup:graphql-kotlin-ktor-client:6.3.5")
    implementation("io.ktor:ktor-client-okhttp:2.2.2")

    annotationProcessor("info.picocli:picocli-codegen:4.7.0")
}

graphql {
    client {
        /* endpoint = "http://localhost:8080/query" */
        schemaFile = file("${project.projectDir}/src/main/resources/schema.graphql")
        packageName = "monoid.codescan.generated"
        queryFileDirectory = "${project.projectDir}/src/main/resources/queries"
        serializer = GraphQLSerializer.KOTLINX
    }
}

application {
    // Define the main class for the application.
    mainClass.set("monoid.codescan.AppKt")
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
